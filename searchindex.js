Search.setIndex({"docnames": ["advanced/implementation", "advanced/performance_valid", "advanced/tensorboard", "advanced/thinning_algo", "dev_guide/model_custom", "generated/easy_tpp.model.torch_model.torch_attnhp", "generated/easy_tpp.model.torch_model.torch_baselayer", "generated/easy_tpp.model.torch_model.torch_basemodel", "generated/easy_tpp.model.torch_model.torch_fullynn", "generated/easy_tpp.model.torch_model.torch_intensity_free", "generated/easy_tpp.model.torch_model.torch_nhp", "generated/easy_tpp.model.torch_model.torch_ode_tpp", "generated/easy_tpp.model.torch_model.torch_rmtpp", "generated/easy_tpp.model.torch_model.torch_sahp", "generated/easy_tpp.model.torch_model.torch_thinning", "generated/easy_tpp.model.torch_model.torch_thp", "get_started/install", "get_started/introduction", "get_started/quick_start", "index", "ref/config", "ref/hpo", "ref/models", "ref/preprocess", "ref/runner", "ref/utils", "ref/wrapper", "user_guide/dataset", "user_guide/run_eval", "user_guide/run_train_pipeline"], "filenames": ["advanced/implementation.rst", "advanced/performance_valid.rst", "advanced/tensorboard.rst", "advanced/thinning_algo.rst", "dev_guide/model_custom.rst", "generated/easy_tpp.model.torch_model.torch_attnhp.rst", "generated/easy_tpp.model.torch_model.torch_baselayer.rst", "generated/easy_tpp.model.torch_model.torch_basemodel.rst", "generated/easy_tpp.model.torch_model.torch_fullynn.rst", "generated/easy_tpp.model.torch_model.torch_intensity_free.rst", "generated/easy_tpp.model.torch_model.torch_nhp.rst", "generated/easy_tpp.model.torch_model.torch_ode_tpp.rst", "generated/easy_tpp.model.torch_model.torch_rmtpp.rst", "generated/easy_tpp.model.torch_model.torch_sahp.rst", "generated/easy_tpp.model.torch_model.torch_thinning.rst", "generated/easy_tpp.model.torch_model.torch_thp.rst", "get_started/install.rst", "get_started/introduction.rst", "get_started/quick_start.rst", "index.rst", "ref/config.rst", "ref/hpo.rst", "ref/models.rst", "ref/preprocess.rst", "ref/runner.rst", "ref/utils.rst", "ref/wrapper.rst", "user_guide/dataset.rst", "user_guide/run_eval.rst", "user_guide/run_train_pipeline.rst"], "titles": ["Model Implementation Details", "Performance validation of EasyTPP models", "Launching the Tensorboard", "Thinning Algorithm for Sampling Event Sequence", "Customize a Model", "easy_tpp.model.torch_model.torch_attnhp", "easy_tpp.model.torch_model.torch_baselayer", "easy_tpp.model.torch_model.torch_basemodel", "easy_tpp.model.torch_model.torch_fullynn", "easy_tpp.model.torch_model.torch_intensity_free", "easy_tpp.model.torch_model.torch_nhp", "easy_tpp.model.torch_model.torch_ode_tpp", "easy_tpp.model.torch_model.torch_rmtpp", "easy_tpp.model.torch_model.torch_sahp", "easy_tpp.model.torch_model.torch_thinning", "easy_tpp.model.torch_model.torch_thp", "Installation", "Introduction", "Quick Start", "<code class=\"docutils literal notranslate\"><span class=\"pre\">EasyTPP</span></code> Documentation", "EasyTPP Config Modules", "EasyTPP Config Modules", "EasyTPP Models", "EasyTPP Preprocess Modules", "EasyTPP Model Runner Modules", "EasyTPP Utilities Modules", "EasyTPP Tf and Torch Wrapper Modules", "Expected Dataset Format and Data Processing", "Evaluate a Model", "Training a Model &amp; Configuration Explanation"], "terms": {"In": [0, 2, 3, 25, 27, 29], "folder": [0, 25, 29], "torch_basemodel": [0, 4], "torch_model": [0, 4, 19], "py": [0, 2, 3, 5, 8, 11, 14, 16, 18, 27, 28, 29], "tf_basemodel": [0, 4], "tf_model": [0, 19], "function": [0, 3, 4, 6, 7, 8, 9, 11, 14, 17, 25, 29], "sampl": [0, 4, 5, 7, 8, 10, 11, 12, 13, 14, 15, 27, 29], "procedur": [0, 3], "ar": [0, 2, 3, 4, 14, 16, 17, 18, 27, 29], "common": [0, 6, 7], "all": [0, 6, 8, 11, 13, 14, 15, 25, 27, 29], "tpp": [0, 9, 11, 16, 17, 19], "inherit": [0, 4, 25], "class": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 25, 29], "specif": [0, 6, 25, 29], "defin": [0, 3, 6, 8, 11, 27, 29], "explain": 0, "below": [0, 29], "section": 0, "The": [0, 6, 10, 11, 14, 17, 18, 19, 25, 27, 28, 29], "follow": [0, 3, 4, 11, 17, 18, 27, 28, 29], "definit": 0, "equat": [0, 6, 7, 10, 13, 25], "8": [0, 6, 7, 16, 17], "A": [0, 2, 3, 6, 7, 10, 14, 25, 28, 29], "modul": [0, 3, 6, 8, 10, 11, 14, 17, 19], "multivari": [0, 3, 10, 14], "i": [0, 1, 2, 3, 4, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 25, 27, 28, 29], "share": [0, 6, 8, 11], "take": [0, 6, 8, 18, 27], "time_delta_seq": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 27], "lambda_at_ev": [0, 7], "lambdas_loss_sampl": [0, 7], "seq_mask": [0, 7], "lambda_type_mask": 0, "input": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 27, 29], "output": [0, 2, 3, 4, 6, 10, 11, 19, 25, 27], "item": [0, 27], "pleas": [0, 16, 17, 29], "see": [0, 17, 29], "It": [0, 11, 25, 29], "note": [0, 3, 15, 18, 25, 27, 28], "1": [0, 1, 3, 6, 10, 12, 14, 16, 17, 19, 25, 27], "sequenti": [0, 5], "predict": [0, 7, 9, 14, 16, 19, 25], "becaus": [0, 13, 25, 27], "we": [0, 1, 2, 3, 4, 10, 12, 14, 16, 17, 18, 19, 25, 27, 28, 29], "perform": [0, 2, 3, 6, 8, 19, 27, 29], "e": [0, 2, 3, 11, 17, 25, 27, 28, 29], "next": [0, 3, 14], "one": [0, 2, 3, 6, 8, 14, 16, 17, 18, 27, 28, 29], "given": [0, 3, 4, 10, 11, 25], "previou": [0, 14], "do": [0, 5, 14, 25, 28, 29], "consid": 0, "last": [0, 3, 7, 14], "ha": [0, 3, 11, 17, 25, 27], "label": 0, "To": [0, 25, 29], "forward": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15], "time_seq": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 27], "type_seq": [0, 5, 7, 8, 9, 10, 11, 12, 13, 15, 27], "For": [0, 3, 6, 14, 29], "differ": [0, 6, 25, 27], "2": [0, 3, 5, 6, 14, 16, 19, 27], "continu": [0, 10, 12], "time": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 25, 27, 28, 29], "evolut": [0, 11], "recal": 0, "dataset": [0, 17, 19, 29], "rst": 0, "assum": [0, 4, 16, 27], "have": [0, 3, 6, 7, 10, 11, 12, 16, 25, 27], "4": [0, 10, 25, 27], "end": [0, 25, 27, 29], "index": [0, 7, 14, 25, 27, 29], "0": [0, 1, 6, 10, 11, 12, 16, 27, 28, 29], "3": [0, 2, 16, 27, 29], "dtime": [0, 3, 7, 9, 10, 14, 27], "t_1": [0, 10, 12, 27], "t_0": [0, 10, 12, 27], "t_2": [0, 27], "t_3": [0, 27], "type": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 25, 27, 28, 29], "e_0": [0, 27], "e_1": [0, 27], "e_2": [0, 27], "e_3": [0, 27], "non_pad_mask": 0, "true": [0, 2, 11, 25, 27, 29], "fals": [0, 2, 6, 7, 14, 25, 27, 28, 29], "th": 0, "denot": [0, 3], "g": [0, 11, 25, 29], "decai": [0, 10, 25], "current": [0, 5, 29], "should": [0, 6, 8, 11, 25], "after": [0, 3, 7, 10, 11, 18, 25, 27, 29], "happen": [0, 9, 25, 27], "therefor": [0, 27], "us": [0, 2, 3, 4, 6, 7, 11, 14, 16, 17, 18, 19, 25, 27, 28, 29], "type_delta_seq": 0, "mask": [0, 5, 6, 7, 13, 15], "specifi": [0, 2, 17, 25, 28, 29], "step": [0, 4, 7, 9, 14, 17, 19], "suppos": [0, 10, 12], "where": [0, 3, 25, 27], "need": [0, 2, 4, 6, 8, 10, 11, 12, 16, 17, 18, 25, 28, 29], "so": [0, 27], "set": [0, 1, 2, 3, 14, 17, 25, 27, 28, 29], "batch_non_pad_mask": [0, 7, 27], "same": [0, 3, 5, 9, 25, 28], "logic": [0, 25], "appli": [0, 6], "code": [0, 3, 4, 5, 11, 13, 14, 15, 27, 28, 29], "typic": [0, 25], "exampl": [0, 2, 17, 18, 25, 28, 29], "call": [0, 5, 6, 8, 9, 11, 13, 15, 25, 29], "event_l": 0, "non_event_l": 0, "num_ev": 0, "compute_loglikelihood": [0, 7], "seq_len": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "max_len": [0, 6, 14, 27, 29], "lambda_t_sampl": 0, "type_mask": [0, 27], "paramet": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 25], "sum": 0, "log": [0, 9, 10, 12, 13, 25, 28, 29], "thei": 0, "minu": 0, "an": [0, 3, 11, 14, 16, 17, 18, 19, 25, 28, 29], "total": [0, 25, 27], "over": [0, 27], "observ": 0, "interv": [0, 3, 6, 7], "t": [0, 10, 11, 12, 16, 25], "sum_": 0, "t_i": [0, 10], "lambda_": 0, "k_i": 0, "int_0": 0, "lambda": 0, "dt": [0, 10, 12, 25], "first": [0, 11, 14, 16, 25, 27], "term": 0, "refer": [0, 3, 9, 11, 16, 17, 27], "second": 0, "includ": [0, 27], "neg": 0, "sign": 0, "author": [0, 18], "": [0, 18, 25], "offici": [0, 27], "pytorch": [0, 3, 4, 7, 16, 17, 25], "github": [0, 5, 8, 9, 11, 13, 14, 15, 16], "nce": 0, "mpp": 0, "lstm": [0, 10], "introduc": [0, 4], "mainli": 0, "come": 0, "from": [0, 4, 7, 13, 14, 15, 16, 18, 25, 27, 28, 29], "recurs": [0, 3], "updat": [0, 5, 10, 25, 27], "state": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 25, 27], "embed": [0, 5, 10], "pass": [0, 6, 8, 11, 28], "cell": [0, 10], "afterward": [0, 6, 8], "anhp": [0, 5, 13, 14, 15], "andtt": [0, 5, 13, 14, 15], "similar": [0, 27, 28], "factor": 0, "faithfulli": 0, "repo": 0, "fix": 0, "version": [0, 11, 16, 17], "veri": 0, "paper": [0, 7, 10, 12], "torch": [0, 2, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 25, 28, 29], "ifl": [0, 9], "small": [0, 27], "between": [0, 6, 7, 25, 27], "our": 0, "ignor": [0, 6, 8], "context_init": 0, "initi": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 28, 29], "rnn": 0, "data": [0, 4, 18, 19, 25], "setup": [0, 2, 16, 17, 19, 25], "learnabl": 0, "thi": [0, 2, 6, 8, 11, 18, 19, 25, 27, 28, 29], "modif": 0, "make": [0, 14], "littl": 0, "impact": 0, "worth": 0, "thin": [0, 2, 4, 14, 19, 28, 29], "algorithm": [0, 2, 14, 19, 28, 29], "can": [0, 2, 11, 17, 18, 25, 27, 28, 29], "when": [0, 16, 25], "compar": 0, "onli": [0, 10, 11, 12, 14, 16, 27, 29], "look": 0, "its": [0, 2, 25, 27], "likelihood": [0, 10, 12, 13], "curv": 0, "kera": 0, "neuralnetworkpointprocess": 0, "which": [0, 3, 11, 13, 14, 17, 25, 27, 28, 29], "simplifi": [0, 11], "spatio": 0, "blog": 0, "without": [0, 27], "graph": 0, "regular": [0, 6], "name": [0, 2, 6, 17, 25, 27, 29], "run": [1, 2, 6, 8, 17, 18, 19], "experi": [1, 28, 29], "variou": 1, "implement": [1, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 27, 29], "each": [1, 3, 4, 6, 10, 11, 12, 13, 14, 15, 17, 25, 27], "train": [1, 2, 16, 19, 25, 27, 28], "max": [1, 14, 25, 27, 29], "number": [1, 2, 3, 6, 14, 25, 27, 28, 29], "epoch": [1, 25], "best": [1, 25, 29], "select": [1, 14, 27], "base": [1, 7, 8, 14, 17, 19, 25, 27, 29], "report": 1, "result": [1, 14, 18, 28], "test": [1, 18, 25, 27, 29], "loglik": [1, 4, 5, 7, 8, 9, 11, 13, 15, 25], "rmse": [1, 2, 29], "acc": [1, 2, 29], "num": [1, 5, 8, 9, 10, 11, 12, 13, 15, 25, 27, 29], "torch_nhp": 1, "93504": 1, "34000": 1, "38656": 1, "200": [1, 2, 27], "tf_nhp": 1, "85774": 1, "34014": 1, "38806": 1, "torch_attnhp": 1, "02001": 1, "33678": 1, "36782": 1, "tf_attnhp": 1, "02315": 1, "33816": 1, "19456": 1, "00593": 1, "33685": 1, "37723": 1, "500": [1, 2, 3, 28, 29], "99827": 1, "33717": 1, "36498": 1, "torch_thp": 1, "tf_thp": 1, "01898": 1, "33677": 1, "37875": 1, "real": [1, 27], "taxi": [1, 2, 18, 27, 28, 29], "here": [2, 4, 18], "present": 2, "how": [2, 4, 18, 29], "within": [2, 6, 8], "easytpp": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 27, 29], "framework": [2, 19, 29], "As": 2, "shown": [2, 29], "pipelin": [2, 16, 17, 18, 27, 28, 29], "firstli": [2, 27, 28, 29], "model_config": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 28, 29], "yaml": [2, 18, 25, 28, 29], "befor": [2, 6, 9, 25, 27], "evalu": [2, 3, 17, 19, 29], "model": [2, 3, 16, 19, 25, 27], "attribut": [2, 11], "use_tfb": [2, 29], "trainer": [2, 29], "Then": [2, 16, 25, 27], "process": [2, 3, 5, 8, 9, 10, 12, 13, 14, 15, 17, 19, 25, 28, 29], "summari": 2, "writer": 2, "track": [2, 25, 27, 29], "valid": [2, 17, 25, 27, 29], "both": [2, 3, 6, 8, 11, 16, 17, 19, 25], "nhp_train": 2, "base_config": [2, 28, 29], "stage": [2, 18, 25, 28, 29], "backend": [2, 16, 17, 25, 28, 29], "dataset_id": [2, 28, 29], "runner_id": [2, 28, 29], "std_tpp": [2, 28, 29], "model_id": [2, 28, 29], "nhp": [2, 7, 10, 19, 28], "base_dir": [2, 28, 29], "checkpoint": [2, 28, 29], "trainer_config": [2, 28, 29], "batch_siz": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 28, 29], "256": [2, 28, 29], "max_epoch": [2, 28, 29], "shuffl": [2, 29], "optim": [2, 19, 25, 29], "adam": [2, 29], "learning_r": [2, 29], "valid_freq": [2, 29], "metric": [2, 25, 29], "seed": [2, 6, 25, 28, 29], "2019": [2, 8, 28, 29], "gpu": [2, 25, 28, 29], "hidden_s": [2, 5, 6, 11, 13, 15, 28, 29], "64": [2, 28], "loss_integral_num_sample_per_step": [2, 29], "20": [2, 6, 27, 29], "pretrained_model_dir": [2, 28], "75518_4377527680_230530": 2, "132355": 2, "saved_model": [2, 28, 29], "num_seq": [2, 3, 28, 29], "10": [2, 3, 27, 28, 29], "num_sampl": [2, 3, 5, 7, 8, 10, 11, 12, 13, 14, 15, 28, 29], "num_exp": [2, 3, 14, 28, 29], "d": [2, 3, 14, 25, 28, 29], "exp": [2, 3, 14, 28, 29], "intensity_bound": [2, 3, 14, 28, 29], "draw": [2, 3, 14, 28, 29], "look_ahead_tim": [2, 3, 28, 29], "patience_count": [2, 3, 14, 28, 29], "5": [2, 3, 27, 28, 29], "maximum": [2, 3, 9, 14, 25, 28, 29], "iter": [2, 3, 14, 17, 27, 28, 29], "adapt": [2, 3, 14, 28, 29], "over_sample_r": [2, 3, 14, 28, 29], "num_samples_boundari": [2, 3, 14, 28, 29], "dtime_max": [2, 3, 14, 28, 29], "num_step_gen": [2, 3, 29], "simpli": [2, 3, 18, 29], "go": 2, "runner": [2, 17, 19, 25, 28, 29], "directori": [2, 18, 28, 29], "find": [2, 7, 14, 29], "out": [2, 7, 25, 28], "address": 2, "complet": [2, 25, 28, 29], "seen": [2, 3, 28, 29], "run_tensorboard": 2, "import": [2, 4, 28, 29], "o": 2, "def": [2, 4, 25, 28, 29], "main": [2, 28, 29], "dir": [2, 17, 25, 28, 29], "log_dir": 2, "nhp_train_taxi_20220527": 2, "18": 2, "30": 2, "tfb_train": 2, "system": 2, "logdir": 2, "format": [2, 17, 19, 25], "return": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 25], "__name__": [2, 28, 29], "__main__": [2, 28, 29], "depict": 3, "neural": [3, 5, 8, 10, 11, 14, 16, 17, 19], "hawk": [3, 5, 10, 13, 14, 15, 19, 25], "self": [3, 4, 7, 10, 13, 14, 19, 25], "point": [3, 7, 8, 9, 10, 12, 14, 19], "tensorflow": [3, 4, 16, 17, 25, 29], "torch_thin": 3, "tf_thin": 3, "basic": [3, 19], "correspond": [3, 10, 11, 12, 14, 25, 27, 29], "draw_next_time_one_step": [3, 14], "consist": [3, 17], "comput": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "upper": [3, 14], "bound": [3, 14], "intens": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 25], "timestamp": [3, 5, 7, 8, 10, 11, 12, 13, 14, 15, 25, 27, 29], "compute_intensity_upper_bound": [3, 14], "some": [3, 25, 27, 29], "insid": [3, 29], "matrix": [3, 5, 6, 25], "predic": [3, 27], "exponenti": [3, 14, 25], "distribut": [3, 9, 14], "sample_exp_distribut": [3, 14], "divid": 3, "standard": 3, "equival": [3, 11, 17], "sample_r": [3, 14], "accord": [3, 10], "properti": 3, "random": [3, 6, 14, 25], "variabl": 3, "size": [3, 5], "everi": [3, 6, 7, 8, 9, 27], "propos": 3, "final": [3, 27], "uniform": [3, 14], "accept": [3, 11, 14, 29], "certain": 3, "probabl": 3, "sample_accept": [3, 14], "earliest": 3, "unaccept": 3, "boundari": [3, 14], "maxsampletim": 3, "along": [3, 4, 25], "equal": [3, 25], "weight": [3, 6, 14], "vector": [3, 6, 7, 10, 27], "product": [3, 27], "By": [3, 16, 17, 27, 29], "default": [3, 5, 7, 14, 16, 17, 25, 27, 28, 29], "onc": 3, "algo": [3, 14], "config": [3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 25], "part": [3, 13, 15, 25], "prefix": 3, "prediction_event_one_step": 3, "basemodel": [3, 7], "torchbasemodel": [3, 4, 7], "tfbasemodel": [3, 4], "activ": [3, 6, 16, 19, 27], "bigger": 3, "than": [3, 16, 25, 27], "Be": [3, 27], "gener": [3, 7, 8, 19, 25, 27, 29], "non": [3, 7, 11], "pad": [3, 7, 10, 12, 17, 25, 29], "predict_multi_step_since_last_ev": [3, 7], "singl": 3, "support": [4, 16, 17, 25], "build": [4, 17], "easy_tpp": [4, 28, 29], "interfac": 4, "newmodel": 4, "__init__": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 25], "super": 4, "sequenc": [4, 5, 7, 9, 10, 12, 14, 17, 25, 29], "event": [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 27, 29], "batch": [4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 25, 27], "loglikelihood": [4, 7, 9, 10, 12], "loss": [4, 5, 8, 9, 10, 11, 12, 13, 15], "loglike_loss": [4, 5, 8, 9, 10, 11, 12, 13, 15], "sampler": [4, 14], "compute_intensities_at_sample_tim": [4, 5, 8, 10, 11, 12, 13, 15], "sample_tim": [4, 5], "kwarg": [4, 5, 6, 8, 10, 11, 12, 13, 15], "If": [4, 11, 14, 16, 17, 18, 25, 29], "start": [4, 25, 27, 29], "tf": [4, 19, 25], "There": [4, 18], "three": [4, 13, 27], "loglikihood": 4, "attnhp": [5, 19, 27], "sourc": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 25, 27], "attent": [5, 7, 13, 15, 19, 27], "iclr": [5, 9, 11], "2022": [5, 27], "http": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18], "arxiv": [5, 8, 10, 11, 14, 15], "org": [5, 8, 10, 11, 12, 14, 15], "ab": [5, 8, 10, 11, 14, 15], "2201": 5, "00044": 5, "com": [5, 7, 8, 9, 11, 13, 14, 15, 16, 18], "yangalan123": [5, 13, 14, 15], "blob": [5, 8, 11, 13, 14], "master": [5, 8, 11, 13, 14, 15, 25], "xfmr_nhp_fast": 5, "modelconfig": [5, 7, 8, 9, 10, 11, 12, 13, 15], "spec": [5, 7, 8, 9, 10, 11, 12, 13, 15, 29], "compute_temporal_embed": 5, "tempor": [5, 6, 8, 9, 12, 19], "tensor": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 25], "emb_siz": 5, "forward_pass": 5, "init_cur_lay": 5, "time_emb": 5, "sample_time_emb": 5, "event_emb": 5, "combined_mask": 5, "structur": [5, 18, 19, 27, 29], "seq_encod": 5, "event_seq": [5, 12, 13, 14, 27], "encod": [5, 6], "seq": [5, 8, 9, 10, 11, 12, 13, 14, 15, 27], "_type_": 5, "tupl": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15], "make_layer_mask": 5, "attention_mask": [5, 7, 13, 15, 27], "creat": [5, 16, 19, 25], "layer": [5, 6, 10], "oper": [5, 11], "aim": 5, "keep": [5, 16, 25], "diagon": 5, "make_combined_att_mask": 5, "layer_mask": 5, "combin": [5, 27], "other": [5, 17, 25, 27], "none": [5, 6, 7, 9, 11, 25], "option": [5, 7, 14, 25], "list": [5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 25, 27], "compute_states_at_sample_tim": [5, 11, 13, 15], "delta": [5, 8, 10, 11, 12, 13, 14, 15], "sample_dtim": [5, 8, 10, 11, 12, 13, 15], "hidden": [5, 7, 8, 9, 10, 11, 12, 13, 15], "sampled_dtim": 5, "event_num": 5, "scaledsoftplu": 6, "num_mark": 6, "threshold": 6, "beta": 6, "mark": [6, 7, 10, 12, 19, 27], "intern": [6, 8, 11], "nn": [6, 8, 11, 25], "scriptmodul": [6, 8, 11], "x": [6, 9, 16, 25], "multiheadattent": 6, "n_head": 6, "d_input": 6, "d_model": 6, "dropout": [6, 29], "output_linear": 6, "queri": 6, "kei": [6, 17, 19, 25, 27], "valu": [6, 9, 11, 14, 25, 27], "output_weight": 6, "overridden": [6, 8, 11], "subclass": [6, 8, 11, 25], "although": [6, 8], "recip": [6, 8], "instanc": [6, 8, 25], "instead": [6, 8, 25], "sinc": [6, 7, 8], "former": [6, 8], "care": [6, 8], "regist": [6, 8, 25, 29], "hook": [6, 8], "while": [6, 8, 9, 27], "latter": [6, 8], "silent": [6, 8], "them": [6, 8, 9, 25, 27], "sublayerconnect": 6, "sublay": 6, "encoderlay": 6, "self_attn": 6, "feed_forward": 6, "use_residu": 6, "timepositionalencod": 6, "5000": 6, "devic": [6, 11, 14, 25], "cpu": [6, 25], "thp": [6, 15, 19], "icml": [6, 13, 15], "2020": [6, 9, 13, 15], "posit": [6, 7, 27], "model_dim": 6, "timeshiftedpositionalencod": 6, "shift": [6, 25], "sahp": [6, 13, 19], "gelu": 6, "arg": [6, 25, 28, 29], "ident": 6, "activation_lay": 6, "act_nam": 6, "construct": [6, 17, 25, 27, 29], "param": [6, 17, 25], "str": [6, 25, 28, 29], "act_lay": 6, "dnn": 6, "inputs_dim": 6, "relu": 6, "l2_reg": 6, "dropout_r": 6, "use_bn": 6, "init_std": 6, "0001": 6, "multi": [6, 7, 19], "percetron": 6, "shape": [6, 10, 12, 13, 25], "nd": 6, "input_dim": 6, "most": [6, 25, 27], "situat": 6, "would": [6, 25], "2d": 6, "argument": [6, 11, 25, 29], "featur": [6, 19], "dimens": [6, 25], "integ": [6, 27], "unit": [6, 25], "float": [6, 9, 14, 25], "l2": 6, "strength": 6, "kernel": [6, 25], "fraction": 6, "bool": [6, 7, 14, 25], "whether": [6, 7, 11, 14, 25], "batchnorm": 6, "python": [6, 16, 17, 18, 25], "static": [7, 11, 25], "generate_model_from_config": 7, "deriv": 7, "get_logits_at_last_step": 7, "logit": 7, "sample_len": 7, "retriev": [7, 11], "hidden_dim": [7, 9, 10, 12], "ref": [7, 8], "medium": [7, 27], "analyt": 7, "vidhya": 7, "understand": 7, "gather": 7, "33717a84ebc4": 7, "eo": 7, "num_event_typ": [7, 8, 10, 11, 12, 13, 15, 27, 29], "unmask": 7, "right": [7, 9, 10, 11, 12, 14, 29], "id": [7, 9, 25, 28, 29], "pad_token_id": [7, 29], "make_dtime_loss_sampl": 7, "n_sampl": 7, "predict_one_step_at_every_ev": [7, 9], "One": [7, 9, 19, 29], "contain": [7, 17, 19, 25, 27], "time_seq_label": 7, "time_delta_seq_label": 7, "event_seq_label": 7, "batch_non_pad_mask_label": 7, "element": [7, 25, 27], "entir": 7, "cumulhazardfunctionnetwork": 8, "cumul": 8, "hazard": 8, "network": [8, 19], "wassnam": 8, "neuralpointprocess": 8, "hidden_st": 8, "fullynn": [8, 19], "fulli": [8, 16, 17, 19, 25], "neurip": [8, 10], "1905": 8, "09690": 8, "kanghoonyoon": 8, "inter": [8, 9, 10, 11, 12, 13, 15, 17], "clamp_preserve_gradi": 9, "min_val": 9, "max_val": 9, "clamp": 9, "preserv": 9, "gradient": [9, 11], "region": 9, "minimum": 9, "normal": 9, "loc": 9, "scale": 9, "validate_arg": 9, "redefin": 9, "log_cdf": 9, "log_survival_funct": 9, "due": 9, "numer": 9, "stabl": [9, 13], "avail": 9, "mixturesamefamili": 9, "mixture_distribut": 9, "component_distribut": 9, "mixtur": 9, "famili": 9, "lognormalmixturedistribut": 9, "log_scal": 9, "log_weight": 9, "mean_log_inter_tim": 9, "std_log_inter_tim": 9, "num_mix_compon": 9, "averag": [9, 27], "std": 9, "intensityfre": [9, 19], "free": [9, 19], "learn": [9, 19, 25], "openreview": 9, "net": 9, "pdf": [9, 12], "hygojheydh": 9, "shchur": 9, "conttimelstmcel": 10, "17": 10, "int": [10, 14, 25], "dim": [10, 25], "init_dense_lay": 10, "bia": 10, "linear": 10, "5a": 10, "6c": 10, "x_i": 10, "hidden_ti_minu": 10, "ct_ti_minu": 10, "c_bar_im1": 10, "c": 10, "c_bar": 10, "t_": [10, 12], "c_bar_": 10, "bar": 10, "c_i": 10, "c_bar_i": 10, "delta_i": 10, "o_i": 10, "7": [10, 16, 27, 29], "gate": 10, "2017": [10, 27], "1612": [10, 14], "09328": [10, 14], "origin": [10, 12, 13], "length": [10, 12, 25, 27, 29], "n": [10, 12, 16], "t0": [10, 12, 25], "t1": [10, 12, 25], "t_n": [10, 12], "t2": [10, 12], "k0": [10, 12], "k1": [10, 12], "k_n": [10, 12], "kn": [10, 12], "could": [10, 12, 19, 25], "tn": [10, 12], "left": [10, 12, 14], "window": [10, 12], "limit": [10, 12], "rnn_cell": 10, "recurr": [10, 12, 19], "event_emb_t": 10, "h_tm1": 10, "c_tm1": 10, "c_bar_tm1": 10, "c_t": 10, "c_bar_t": 10, "gate_delta": 10, "gate_o": 10, "delta_t": [10, 11], "o_t": 10, "c_d_t": 10, "h_d_t": 10, "get_stat": 10, "right_hidden": 10, "sample_dt": 10, "mc_point": 10, "num_tim": [10, 11, 12], "num_mc_sampl": [10, 11, 12], "neuralodeadjoint": 11, "ctx": 11, "z_init": 11, "ode_fn": 11, "solver": 11, "num_sample_tim": 11, "model_paramet": 11, "backward": 11, "grad_z": 11, "formula": [11, 25], "differenti": [11, 25], "mode": 11, "automat": 11, "vjp": 11, "must": [11, 25, 28], "context": 11, "mani": 11, "were": 11, "w": 11, "r": 11, "requir": [11, 17, 19, 28, 29], "grad": 11, "you": [11, 16, 18, 25], "just": [11, 25], "save": [11, 25, 28, 29], "dure": [11, 29], "also": [11, 18, 25, 27], "needs_input_grad": 11, "boolean": 11, "repres": [11, 27], "neuralod": 11, "input_st": 11, "delta_tim": 11, "return_st": 11, "odetpp": [11, 19], "od": [11, 19, 25], "2011": 11, "04583": 11, "2021": 11, "msurtsukov": 11, "io": 11, "liruilong940607": 11, "state_ti_plu": 11, "rmtpp": [12, 19, 29], "kdd": 12, "2016": [12, 27], "www": 12, "kdd2016": 12, "file": [12, 17, 19, 25, 27], "rpp1081": 12, "dua": 12, "evolve_and_get_intents": 12, "right_hiddens_bnh": 12, "dts_bng": 12, "eq": 12, "11": [12, 27], "collect": [13, 15], "slightli": 13, "modifi": 13, "state_decai": 13, "encode_st": 13, "duration_t": 13, "15": [13, 27], "pre": 13, "eventsampl": 14, "esm": 14, "via": 14, "multipli": 14, "up": [14, 27], "intensity_fn": 14, "compute_last_step_onli": 14, "fn": 14, "wheter": 14, "pnly": 14, "rate": [14, 25], "sample_uniform_distribut": 14, "intensity_upper_bound": 14, "unif_numb": 14, "total_intens": 14, "exp_numb": 14, "accumul": 14, "drawn": 14, "criterion": 14, "reject": 14, "dtime_boundari": 14, "timestep": 14, "transform": [15, 19, 25], "2002": 15, "09291": 15, "tree": 15, "event_st": 15, "provid": [16, 17, 18, 28, 29], "open": [16, 17, 18, 19, 25, 27], "librari": [16, 17], "autom": [16, 17], "13": [16, 17, 27, 28], "environ": 16, "whose": [16, 25, 28], "least": 16, "greater": 16, "don": 16, "document": 16, "configur": [16, 17, 19, 25, 28], "anaconda": 16, "conda": 16, "want": [16, 17, 25], "addition": [16, 17], "easi": [16, 19], "git": 16, "clone": 16, "ant": 16, "research": [16, 19], "easytemporalpointprocess": 16, "cd": 16, "two": [17, 25, 27, 29], "respect": 17, "compat": [17, 19], "well": 17, "At": [17, 18], "level": 17, "packag": 17, "compon": 17, "design": 17, "loos": 17, "coupl": 17, "flexibl": 17, "user": [17, 27], "develop": [17, 27], "custom": [17, 19], "descript": 17, "preprocess": [17, 18, 19], "wise": 17, "relat": [17, 29], "work": [17, 25, 27], "raw": [17, 27], "sota": 17, "more": [17, 18, 25, 27], "detail": [17, 18, 19, 29], "encapsul": 17, "control": 17, "either": [17, 18, 25], "pip": 17, "built": 17, "gatech": [17, 27], "dict": [17, 25, 27], "time_since_last_ev": [17, 27], "time_since_start": [17, 27], "type_ev": [17, 27], "feed": 17, "pseudo": 17, "dataload": 17, "found": [17, 18, 27, 28], "datatset": 17, "explan": 17, "launch": [17, 19, 29], "script": [17, 18, 19], "whole": [17, 27, 29], "show": [18, 25, 29], "hypro": 18, "pickl": [18, 25, 27], "googl": [18, 27], "drive": [18, 27], "json": [18, 25], "huggingfac": 18, "write": 18, "wai": 18, "data_format": [18, 29], "train_dir": [18, 29], "pkl": [18, 29], "valid_dir": [18, 29], "dev": [18, 27, 29], "test_dir": [18, 29], "choos": 18, "directli": 18, "load": [18, 25, 29], "put": [18, 29], "meanwhil": 18, "feasibl": 18, "local": [18, 25], "preset": [18, 29], "train_nhp": [18, 28, 29], "copi": [18, 25, 28, 29], "______taxi": 18, "____": 18, "______experiment_config": 18, "command": 18, "misc": 18, "whong": [18, 27], "14": 18, "titl": 18, "f": 18, "oil": 18, "ing": 18, "nyc": 18, "trip": 18, "chri": 18, "year": [18, 27], "2014": [18, 27], "url": 18, "chriswhong": 18, "foil_nyc_taxi": 18, "applic": 19, "toolkit": 19, "reproduc": 19, "hope": 19, "project": [19, 27], "benefit": 19, "practition": 19, "goal": 19, "easili": 19, "benchmark": [19, 27], "introduct": 19, "instal": [19, 25], "prepar": 19, "quick": 19, "download": 19, "checkout": 19, "new": [19, 25, 27], "rewrit": 19, "relev": 19, "method": [19, 25], "tensorboard": [19, 29], "usag": 19, "simul": [19, 25], "anhn": 19, "hyper": 19, "wrapper": 19, "util": 19, "py_assert": [19, 25], "make_config_str": [19, 25], "create_fold": [19, 25], "save_yaml_config": [19, 25], "load_yaml_config": [19, 25], "runnerphas": [19, 25], "logconst": [19, 25], "load_pickl": [19, 25], "has_kei": [19, 25], "array_pad_col": [19, 25], "metricshelp": [19, 25], "metricstrack": [19, 25], "set_devic": [19, 25], "set_optim": [19, 25], "set_se": [19, 25], "save_pickl": [19, 25], "count_model_param": [19, 25], "registr": [19, 25], "get_unique_id": [19, 25], "timer": [19, 25], "concat_el": [19, 25], "get_stag": [19, 25], "to_dict": [19, 25], "parse_uri_to_protocol_and_path": [19, 25], "is_master_process": [19, 25], "is_local_master_process": [19, 25], "dict_deep_upd": [19, 25], "defaultrunnerconfig": [19, 25], "rk4_step_method": [19, 25], "is_tf_avail": [19, 25], "is_tensorflow_probability_avail": [19, 25], "is_torchvision_avail": [19, 25], "is_torch_cuda_avail": [19, 25], "is_tf_gpu_avail": [19, 25], "is_torch_gpu_avail": [19, 25], "is_torch_avail": [19, 25], "requires_backend": [19, 25], "paddingstrategi": [19, 25], "explicitenum": [19, 25], "truncationstrategi": [19, 25], "tensortyp": [19, 25], "is_torch_devic": [19, 25], "is_numpy_arrai": [19, 25], "save_json": [19, 25], "load_json": [19, 25], "generate_and_save_json": [19, 25], "condit": 25, "exception_typ": 25, "msg": 25, "assert": 25, "ensur": 25, "hold": 25, "otherwis": 25, "throw": 25, "messag": 25, "_standarderror": 25, "error": 25, "valueerror": 25, "rais": 25, "doe": 25, "max_num_kei": 25, "concat": 25, "concaten": [25, 29], "string": 25, "path": 25, "doesn": 25, "exist": 25, "save_dir": 25, "target": 25, "object": [25, 27, 28, 29], "config_dir": [25, 28, 29], "disk": 25, "phase": 25, "enum": 25, "handler": 25, "default_format": 25, "asctim": 25, "levelnam": 25, "default_format_long": 25, "filenam": 25, "pid": 25, "line": 25, "lineno": 25, "funcnam": 25, "file_dir": 25, "binaryio": 25, "ani": 25, "target_dict": 25, "target_kei": 25, "check": 25, "arr": 25, "max_num_col": 25, "pad_index": 25, "arrai": 25, "column": 25, "np": 25, "col": 25, "fill": 25, "maxim": 25, "minim": 25, "get_metric_funct": 25, "get_metric_direct": 25, "get_all_registered_metr": 25, "direct": 25, "overwrit": 25, "metrics_dict_to_str": 25, "metrics_dict": 25, "convert": 25, "consol": [25, 28], "get_metrics_callback_from_nam": 25, "metric_nam": 25, "callback": 25, "record": [25, 29], "update_best": 25, "notimplementederror": 25, "been": 25, "lr": 25, "wrong": 25, "1029": 25, "object_to_sav": 25, "count": 25, "moduel": 25, "gain": 25, "access": 25, "registri": 25, "decor": 25, "classmethod": 25, "baseclass": 25, "list_avail": 25, "get": 25, "by_nam": 25, "store": 25, "themselv": 25, "case": 25, "from_param": 25, "constructor": 25, "under": 25, "particular": 25, "els": 25, "alreadi": 25, "like": 25, "shifttransform": 25, "param1": 25, "param2": 25, "let": 25, "instanti": 25, "give": 25, "those": [25, 27], "annot": 25, "sever": 25, "taken": 25, "callabl": 25, "isn": 25, "necessarili": 25, "resolve_class_nam": 25, "wa": 25, "allow": 25, "ad": 25, "cannot": 25, "separ": 25, "cl": 25, "order": 25, "tell": 25, "u": 25, "what": 25, "registry_dict": 25, "uniqu": 25, "thread": 25, "m": 25, "elaps": 25, "obj": 25, "classkei": 25, "uri": 25, "pars": 25, "protocol": 25, "lack": 25, "identifi": 25, "resourc": 25, "locat": 25, "machin": 25, "is_add_new_kei": 25, "deepli": 25, "add": 25, "duplic": 25, "default_dataset_id": 25, "conttim": [25, 29], "diff_func": 25, "z0": 25, "fourth": 25, "rung": 25, "kutta": 25, "solv": 25, "possibl": 25, "eventtoken": 25, "__call__": 25, "tab": 25, "longest": 25, "max_length": 25, "do_not_pad": 25, "explicit": 25, "miss": 25, "truncat": [25, 29], "longest_first": 25, "do_not_trunc": 25, "return_tensor": 25, "eventtokenizerbas": 25, "pt": 25, "numpi": 25, "safe": 25, "even": 25, "serializ": 25, "dictionari": 25, "ioerror": 25, "written": 25, "read": [25, 29], "jsondecodeerror": 25, "n_node": 25, "end_tim": 25, "baselin": 25, "adjac": 25, "max_seq_len": 25, "target_fil": 25, "synthet": 25, "hug": 25, "face": 25, "node": 25, "until": 25, "influenc": 25, "dim_process": 27, "idx_ev": 27, "0267814": 27, "time_since_last_same_ev": 27, "4029268": 27, "4297082": 27, "sub": 27, "absolut": 27, "rel": 27, "token": 27, "fed": 27, "6": [27, 29], "among": 27, "time_pad": 27, "type_pad": 27, "unus": 27, "indic": 27, "calcul": 27, "attend": 27, "past": 27, "hot": 27, "zero": 27, "six": 27, "mechan": 27, "event_token": 27, "9": 27, "becom": 27, "0000": 27, "8252": 27, "3806": 27, "8349": 27, "5554": 27, "4542": 27, "runnabl": 27, "wide": 27, "retweet": 27, "zhou": 27, "2013": 27, "stamp": 27, "categor": 27, "larg": 27, "fewer": 27, "120": 27, "1363": 27, "rest": 27, "subset": 27, "5200": 27, "70": 27, "pick": 27, "drop": 27, "off": 27, "across": 27, "five": 27, "borough": 27, "york": 27, "citi": 27, "randomli": 27, "2000": 27, "driver": 27, "disjoint": 27, "1400": 27, "400": 27, "stackoverflow": 27, "leskovec": 27, "award": 27, "question": 27, "answer": 27, "websit": 27, "receiv": 27, "badg": 27, "22": 27, "kind": 27, "taobao": 27, "xue": 27, "et": 27, "al": 27, "click": 27, "behavior": 27, "shop": 27, "page": 27, "novemb": 27, "25": 27, "decemb": 27, "03": 27, "categori": 27, "rank": 27, "frequenc": 27, "top": 27, "19": [27, 28], "kept": 27, "merg": 27, "4800": 27, "150": 27, "amazon": 27, "review": 27, "januari": 27, "2008": 27, "octob": 27, "2018": 27, "produc": 27, "16": [27, 29], "besid": 27, "publish": 27, "textual": 27, "gdelt": 27, "shi": 27, "2023": 27, "monitor": 27, "world": 27, "live": 27, "minut": 27, "focus": 27, "polit": 27, "g20": 27, "countri": 27, "01": 27, "07": 27, "31": 27, "corpu": 27, "109000": 27, "subject": 27, "twenti": 27, "cameo": 27, "consult": 27, "investig": 27, "2279": 27, "entiti": 27, "individu": 27, "group": 27, "tesla": 27, "australia": 27, "split": 27, "date": 27, "83100": 27, "05": 27, "16650": 27, "9250": 27, "text": 27, "04": 27, "02": 27, "2500": 27, "frequent": 27, "23": [27, 28], "special": 27, "24": 27, "actual": 27, "content": 27, "cut": 27, "segment": 27, "2015": 27, "08": 27, "49": 27, "680": 27, "020": 27, "090": 27, "task": 28, "eval": [28, 29], "nhp_eval": 28, "use_ln": [28, 29], "26507_4380788096_231111": 28, "101848": 28, "example_config": [28, 29], "modelrunn": 28, "argpars": [28, 29], "config_factori": [28, 29], "runnerconfig": 28, "parser": [28, 29], "argumentpars": [28, 29], "add_argu": [28, 29], "experiment_config": [28, 29], "help": [28, 29], "experiment_id": [28, 29], "rmtpp_eval": 28, "parse_arg": [28, 29], "build_from_yaml_fil": [28, 29], "model_runn": [28, 29], "build_from_config": [28, 29], "print": 28, "output_config_dir": [28, 29], "nhp_test_conttime_20221002": 28, "nhp_test_output": 28, "tutori": 29, "principl": 29, "guid": 29, "overal": 29, "pipeline_config_id": 29, "entri": 29, "runner_config": 29, "hpo_runner_config": 29, "multipl": 29, "datafil": 29, "moment": 29, "data_spec": 29, "inform": 29, "exclud": 29, "padding_sid": 29, "truncation_sid": 29, "100": 29, "block": 29, "32": 29, "time_emb_s": 29, "num_lay": 29, "num_head": 29, "mc_num_sample_per_step": 29, "sharing_param_lay": 29, "thinning_param": 29, "form": 29, "rmtpp_train": 29, "correct": 29, "subfold": 29, "nhp_train_output": 29, "data_config": 29, "num_event_types_pad": 29, "event_pad_index": 29, "exp_id": 29, "log_fold": 29, "98888_4299965824_221205": 29, "153425": 29, "saved_model_dir": 29, "saved_log_dir": 29, "rmtpp_train_output": 29, "001": 29, "seq_pad_end": 29, "is_train": 29, "mean": 29}, "objects": {"easy_tpp.model": [[22, 0, 0, "-", "tf_model"], [22, 0, 0, "-", "torch_model"]], "easy_tpp.model.torch_model": [[5, 0, 0, "-", "torch_attnhp"], [6, 0, 0, "-", "torch_baselayer"], [7, 0, 0, "-", "torch_basemodel"], [8, 0, 0, "-", "torch_fullynn"], [9, 0, 0, "-", "torch_intensity_free"], [10, 0, 0, "-", "torch_nhp"], [11, 0, 0, "-", "torch_ode_tpp"], [12, 0, 0, "-", "torch_rmtpp"], [13, 0, 0, "-", "torch_sahp"], [14, 0, 0, "-", "torch_thinning"], [15, 0, 0, "-", "torch_thp"]], "easy_tpp.model.torch_model.torch_attnhp": [[5, 1, 1, "", "AttNHP"]], "easy_tpp.model.torch_model.torch_attnhp.AttNHP": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "compute_intensities_at_sample_times"], [5, 2, 1, "", "compute_states_at_sample_times"], [5, 2, 1, "", "compute_temporal_embedding"], [5, 2, 1, "", "forward"], [5, 2, 1, "", "forward_pass"], [5, 2, 1, "", "loglike_loss"], [5, 2, 1, "", "make_combined_att_mask"], [5, 2, 1, "", "make_layer_mask"], [5, 2, 1, "", "seq_encoding"]], "easy_tpp.model.torch_model.torch_baselayer": [[6, 1, 1, "", "DNN"], [6, 1, 1, "", "EncoderLayer"], [6, 1, 1, "", "GELU"], [6, 1, 1, "", "Identity"], [6, 1, 1, "", "MultiHeadAttention"], [6, 1, 1, "", "ScaledSoftplus"], [6, 1, 1, "", "SublayerConnection"], [6, 1, 1, "", "TimePositionalEncoding"], [6, 1, 1, "", "TimeShiftedPositionalEncoding"], [6, 3, 1, "", "activation_layer"]], "easy_tpp.model.torch_model.torch_baselayer.DNN": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_baselayer.EncoderLayer": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_baselayer.GELU": [[6, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_baselayer.Identity": [[6, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_baselayer.MultiHeadAttention": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_baselayer.ScaledSoftplus": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_baselayer.SublayerConnection": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_baselayer.TimePositionalEncoding": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_baselayer.TimeShiftedPositionalEncoding": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_basemodel": [[7, 1, 1, "", "TorchBaseModel"]], "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "compute_loglikelihood"], [7, 2, 1, "", "generate_model_from_config"], [7, 2, 1, "", "get_logits_at_last_step"], [7, 2, 1, "", "make_dtime_loss_samples"], [7, 2, 1, "", "predict_multi_step_since_last_event"], [7, 2, 1, "", "predict_one_step_at_every_event"]], "easy_tpp.model.torch_model.torch_fullynn": [[8, 1, 1, "", "CumulHazardFunctionNetwork"], [8, 1, 1, "", "FullyNN"]], "easy_tpp.model.torch_model.torch_fullynn.CumulHazardFunctionNetwork": [[8, 2, 1, "", "__init__"], [8, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_fullynn.FullyNN": [[8, 2, 1, "", "__init__"], [8, 2, 1, "", "compute_intensities_at_sample_times"], [8, 2, 1, "", "forward"], [8, 2, 1, "", "loglike_loss"]], "easy_tpp.model.torch_model.torch_intensity_free": [[9, 1, 1, "", "IntensityFree"], [9, 1, 1, "", "LogNormalMixtureDistribution"], [9, 1, 1, "", "MixtureSameFamily"], [9, 1, 1, "", "Normal"], [9, 3, 1, "", "clamp_preserve_gradients"]], "easy_tpp.model.torch_model.torch_intensity_free.IntensityFree": [[9, 2, 1, "", "__init__"], [9, 2, 1, "", "forward"], [9, 2, 1, "", "loglike_loss"], [9, 2, 1, "", "predict_one_step_at_every_event"]], "easy_tpp.model.torch_model.torch_intensity_free.LogNormalMixtureDistribution": [[9, 2, 1, "", "__init__"]], "easy_tpp.model.torch_model.torch_nhp": [[10, 1, 1, "", "ContTimeLSTMCell"], [10, 1, 1, "", "NHP"]], "easy_tpp.model.torch_model.torch_nhp.ContTimeLSTMCell": [[10, 2, 1, "", "__init__"], [10, 2, 1, "", "decay"], [10, 2, 1, "", "forward"], [10, 2, 1, "", "init_dense_layer"]], "easy_tpp.model.torch_model.torch_nhp.NHP": [[10, 2, 1, "", "__init__"], [10, 2, 1, "", "compute_intensities_at_sample_times"], [10, 2, 1, "", "forward"], [10, 2, 1, "", "get_states"], [10, 2, 1, "", "loglike_loss"]], "easy_tpp.model.torch_model.torch_ode_tpp": [[11, 1, 1, "", "NeuralODE"], [11, 1, 1, "", "NeuralODEAdjoint"], [11, 1, 1, "", "ODETPP"]], "easy_tpp.model.torch_model.torch_ode_tpp.NeuralODE": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_ode_tpp.NeuralODEAdjoint": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "backward"], [11, 2, 1, "", "forward"]], "easy_tpp.model.torch_model.torch_ode_tpp.ODETPP": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "compute_intensities_at_sample_times"], [11, 2, 1, "", "compute_states_at_sample_times"], [11, 2, 1, "", "forward"], [11, 2, 1, "", "loglike_loss"]], "easy_tpp.model.torch_model.torch_rmtpp": [[12, 1, 1, "", "RMTPP"]], "easy_tpp.model.torch_model.torch_rmtpp.RMTPP": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "compute_intensities_at_sample_times"], [12, 2, 1, "", "evolve_and_get_intentsity"], [12, 2, 1, "", "forward"], [12, 2, 1, "", "loglike_loss"]], "easy_tpp.model.torch_model.torch_sahp": [[13, 1, 1, "", "SAHP"]], "easy_tpp.model.torch_model.torch_sahp.SAHP": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "compute_intensities_at_sample_times"], [13, 2, 1, "", "compute_states_at_sample_times"], [13, 2, 1, "", "forward"], [13, 2, 1, "", "loglike_loss"], [13, 2, 1, "", "state_decay"]], "easy_tpp.model.torch_model.torch_thinning": [[14, 1, 1, "", "EventSampler"]], "easy_tpp.model.torch_model.torch_thinning.EventSampler": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "compute_intensity_upper_bound"], [14, 2, 1, "", "draw_next_time_one_step"], [14, 2, 1, "", "sample_accept"], [14, 2, 1, "", "sample_exp_distribution"], [14, 2, 1, "", "sample_uniform_distribution"]], "easy_tpp.model.torch_model.torch_thp": [[15, 1, 1, "", "THP"]], "easy_tpp.model.torch_model.torch_thp.THP": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "compute_intensities_at_sample_times"], [15, 2, 1, "", "compute_states_at_sample_times"], [15, 2, 1, "", "forward"], [15, 2, 1, "", "loglike_loss"]], "": [[25, 0, 0, "-", "utils"]], "utils": [[25, 1, 1, "", "DefaultRunnerConfig"], [25, 1, 1, "", "ExplicitEnum"], [25, 1, 1, "", "LogConst"], [25, 1, 1, "", "MetricsHelper"], [25, 1, 1, "", "MetricsTracker"], [25, 1, 1, "", "PaddingStrategy"], [25, 1, 1, "", "Registrable"], [25, 1, 1, "", "RunnerPhase"], [25, 1, 1, "", "TensorType"], [25, 1, 1, "", "Timer"], [25, 1, 1, "", "TruncationStrategy"], [25, 3, 1, "", "array_pad_cols"], [25, 3, 1, "", "concat_element"], [25, 3, 1, "", "count_model_params"], [25, 3, 1, "", "create_folder"], [25, 3, 1, "", "dict_deep_update"], [25, 3, 1, "", "generate_and_save_json"], [25, 3, 1, "", "get_stage"], [25, 3, 1, "", "get_unique_id"], [25, 3, 1, "", "has_key"], [25, 3, 1, "", "is_local_master_process"], [25, 3, 1, "", "is_master_process"], [25, 3, 1, "", "is_numpy_array"], [25, 3, 1, "", "is_tensorflow_probability_available"], [25, 3, 1, "", "is_tf_available"], [25, 3, 1, "", "is_tf_gpu_available"], [25, 3, 1, "", "is_torch_available"], [25, 3, 1, "", "is_torch_cuda_available"], [25, 3, 1, "", "is_torch_device"], [25, 3, 1, "", "is_torch_gpu_available"], [25, 3, 1, "", "is_torchvision_available"], [25, 3, 1, "", "load_json"], [25, 3, 1, "", "load_pickle"], [25, 3, 1, "", "load_yaml_config"], [25, 3, 1, "", "make_config_string"], [25, 3, 1, "", "parse_uri_to_protocol_and_path"], [25, 3, 1, "", "py_assert"], [25, 3, 1, "", "requires_backends"], [25, 3, 1, "", "rk4_step_method"], [25, 3, 1, "", "save_json"], [25, 3, 1, "", "save_pickle"], [25, 3, 1, "", "save_yaml_config"], [25, 3, 1, "", "set_device"], [25, 3, 1, "", "set_optimizer"], [25, 3, 1, "", "set_seed"], [25, 3, 1, "", "to_dict"]], "utils.DefaultRunnerConfig": [[25, 4, 1, "", "DEFAULT_DATASET_ID"]], "utils.LogConst": [[25, 4, 1, "", "DEFAULT_FORMAT"], [25, 4, 1, "", "DEFAULT_FORMAT_LONG"]], "utils.MetricsHelper": [[25, 4, 1, "", "MAXIMIZE"], [25, 4, 1, "", "MINIMIZE"], [25, 2, 1, "", "get_all_registered_metric"], [25, 2, 1, "", "get_metric_direction"], [25, 2, 1, "", "get_metric_function"], [25, 2, 1, "", "get_metrics_callback_from_names"], [25, 2, 1, "", "metrics_dict_to_str"], [25, 2, 1, "", "register"]], "utils.MetricsTracker": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "update_best"]], "utils.PaddingStrategy": [[25, 4, 1, "", "DO_NOT_PAD"], [25, 4, 1, "", "LONGEST"], [25, 4, 1, "", "MAX_LENGTH"]], "utils.Registrable": [[25, 2, 1, "", "by_name"], [25, 2, 1, "", "list_available"], [25, 2, 1, "", "register"], [25, 2, 1, "", "registry_dict"], [25, 2, 1, "", "resolve_class_name"]], "utils.RunnerPhase": [[25, 4, 1, "", "PREDICT"], [25, 4, 1, "", "TRAIN"], [25, 4, 1, "", "VALIDATE"]], "utils.TensorType": [[25, 4, 1, "", "NUMPY"], [25, 4, 1, "", "PYTORCH"], [25, 4, 1, "", "TENSORFLOW"]], "utils.Timer": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "end"], [25, 2, 1, "", "start"]], "utils.TruncationStrategy": [[25, 4, 1, "", "DO_NOT_TRUNCATE"], [25, 4, 1, "", "LONGEST_FIRST"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"model": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 22, 24, 28, 29], "implement": [0, 3], "detail": 0, "basic": 0, "structur": 0, "comput": 0, "loglikelihood": 0, "non": 0, "pad": [0, 27], "event": [0, 3], "sequenc": [0, 3, 27], "integr": 0, "insid": 0, "neural": 0, "hawk": 0, "process": [0, 27], "nhp": 0, "attent": 0, "attnhp": 0, "transform": 0, "thp": 0, "self": 0, "sahp": 0, "recurr": 0, "mark": 0, "tempor": 0, "point": 0, "rmtpp": 0, "intens": 0, "free": 0, "learn": 0, "intensityfre": 0, "fulli": 0, "network": 0, "base": 0, "gener": 0, "fullynn": 0, "od": 0, "odetpp": 0, "anhn": 0, "perform": 1, "valid": 1, "easytpp": [1, 19, 20, 21, 22, 23, 24, 25, 26], "simul": 1, "dataset": [1, 18, 27], "conttim": 1, "launch": 2, "tensorboard": 2, "step": [2, 3, 28, 29], "1": [2, 28, 29], "activ": 2, "usag": 2, "config": [2, 20, 21, 28, 29], "file": [2, 18, 28, 29], "2": [2, 28, 29], "thin": 3, "algorithm": 3, "sampl": 3, "The": 3, "One": 3, "predict": [3, 17], "multi": 3, "custom": 4, "creat": 4, "new": 4, "tpp": 4, "class": 4, "rewrit": 4, "relev": 4, "method": 4, "easy_tpp": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "torch_model": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 22], "torch_attnhp": 5, "torch_baselay": 6, "torch_basemodel": 7, "torch_fullynn": 8, "torch_intensity_fre": 9, "torch_nhp": 10, "torch_ode_tpp": 11, "torch_rmtpp": 12, "torch_sahp": 13, "torch_thin": 14, "torch_thp": 15, "instal": [16, 17], "requir": [16, 27], "pip": 16, "sourc": 16, "introduct": 17, "framework": 17, "prepar": 17, "data": [17, 27, 29], "train": [17, 18, 29], "quick": 18, "start": [18, 19], "download": 18, "setup": [18, 28, 29], "configur": [18, 29], "refer": [18, 19], "document": 19, "get": 19, "user": 19, "guid": 19, "develop": 19, "advanc": 19, "topic": 19, "api": 19, "modul": [20, 21, 22, 23, 24, 25, 26], "tf_model": 22, "preprocess": [23, 27], "runner": 24, "util": 25, "tf": 26, "torch": 26, "wrapper": 26, "expect": 27, "format": 27, "mask": 27, "an": 27, "exampl": 27, "evalu": 28, "run": [28, 29], "script": [28, 29], "checkout": [28, 29], "output": [28, 29], "explan": 29, "contain": 29}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx": 58}, "alltitles": {"Model Implementation Details": [[0, "model-implementation-details"]], "Basic structure": [[0, "basic-structure"]], "Computing the loglikelihood of non-pad event sequence": [[0, "computing-the-loglikelihood-of-non-pad-event-sequence"]], "Computing the integral inside the loglikelihood": [[0, "computing-the-integral-inside-the-loglikelihood"]], "Neural Hawkes Process (NHP)": [[0, "neural-hawkes-process-nhp"]], "Attentive Neural Hawkes Process (AttNHP)": [[0, "attentive-neural-hawkes-process-attnhp"]], "Transformer Hawkes Process (THP)": [[0, "transformer-hawkes-process-thp"]], "Self-Attentive Hawkes Process (SAHP)": [[0, "self-attentive-hawkes-process-sahp"]], "Recurrent Marked Temporal Point Processes (RMTPP)": [[0, "recurrent-marked-temporal-point-processes-rmtpp"]], "Intensity Free Learning of Temporal Point Process (IntensityFree)": [[0, "intensity-free-learning-of-temporal-point-process-intensityfree"]], "Fully Neural Network based Model for General Temporal Point Processes (FullyNN)": [[0, "fully-neural-network-based-model-for-general-temporal-point-processes-fullynn"]], "ODE-based Temporal Point Process (ODETPP)": [[0, "ode-based-temporal-point-process-odetpp"]], "Attentive Neural Hawkes Network (ANHN)": [[0, "attentive-neural-hawkes-network-anhn"]], "Performance validation of EasyTPP models": [[1, "performance-validation-of-easytpp-models"]], "Simulated dataset": [[1, "simulated-dataset"]], "Conttime": [[1, "conttime"]], "Launching the Tensorboard": [[2, "launching-the-tensorboard"]], "Step 1: Activate the usage of tensorboard in Config file": [[2, "step-1-activate-the-usage-of-tensorboard-in-config-file"]], "Step 2: Launching the tensorboard": [[2, "step-2-launching-the-tensorboard"]], "Thinning Algorithm for Sampling Event Sequence": [[3, "thinning-algorithm-for-sampling-event-sequence"]], "The implementation of the algorithm": [[3, "the-implementation-of-the-algorithm"]], "One-step prediction": [[3, "one-step-prediction"]], "Multi-step prediction": [[3, "multi-step-prediction"]], "Customize a Model": [[4, "customize-a-model"]], "Create a new TPP Model Class": [[4, "create-a-new-tpp-model-class"]], "Rewrite Relevant Methods": [[4, "rewrite-relevant-methods"]], "easy_tpp.model.torch_model.torch_attnhp": [[5, "module-easy_tpp.model.torch_model.torch_attnhp"]], "easy_tpp.model.torch_model.torch_baselayer": [[6, "module-easy_tpp.model.torch_model.torch_baselayer"]], "easy_tpp.model.torch_model.torch_basemodel": [[7, "module-easy_tpp.model.torch_model.torch_basemodel"]], "easy_tpp.model.torch_model.torch_fullynn": [[8, "module-easy_tpp.model.torch_model.torch_fullynn"]], "easy_tpp.model.torch_model.torch_intensity_free": [[9, "module-easy_tpp.model.torch_model.torch_intensity_free"]], "easy_tpp.model.torch_model.torch_nhp": [[10, "module-easy_tpp.model.torch_model.torch_nhp"]], "easy_tpp.model.torch_model.torch_ode_tpp": [[11, "module-easy_tpp.model.torch_model.torch_ode_tpp"]], "easy_tpp.model.torch_model.torch_rmtpp": [[12, "module-easy_tpp.model.torch_model.torch_rmtpp"]], "easy_tpp.model.torch_model.torch_sahp": [[13, "module-easy_tpp.model.torch_model.torch_sahp"]], "easy_tpp.model.torch_model.torch_thinning": [[14, "module-easy_tpp.model.torch_model.torch_thinning"]], "easy_tpp.model.torch_model.torch_thp": [[15, "module-easy_tpp.model.torch_model.torch_thp"]], "Installation": [[16, "installation"]], "Requirements": [[16, "requirements"]], "Install": [[16, "install"], [17, "install"]], "Install with pip": [[16, "install-with-pip"]], "Install with the source": [[16, "install-with-the-source"]], "Introduction": [[17, "introduction"]], "Framework": [[17, "framework"]], "Prepare Data": [[17, "prepare-data"]], "Model Training and Prediction": [[17, "model-training-and-prediction"]], "Quick Start": [[18, "quick-start"]], "Download Dataset": [[18, "download-dataset"]], "Setup the configuration file": [[18, "setup-the-configuration-file"]], "Train the Model": [[18, "train-the-model"]], "Reference": [[18, "reference"]], "EasyTPP Documentation": [[19, "easytpp-documentation"]], "GETTING STARTED": [[19, null]], "USER GUIDE": [[19, null]], "DEVELOPER GUIDE": [[19, null]], "ADVANCED TOPICS": [[19, null]], "API REFERENCE": [[19, null]], "EasyTPP Config Modules": [[20, "easytpp-config-modules"], [21, "easytpp-config-modules"]], "EasyTPP Models": [[22, "easytpp-models"]], "model.tf_model module": [[22, "module-easy_tpp.model.tf_model"]], "model.torch_model module": [[22, "module-easy_tpp.model.torch_model"]], "EasyTPP Preprocess Modules": [[23, "easytpp-preprocess-modules"]], "EasyTPP Model Runner Modules": [[24, "easytpp-model-runner-modules"]], "EasyTPP Utilities Modules": [[25, "module-utils"]], "EasyTPP Tf and Torch Wrapper Modules": [[26, "easytpp-tf-and-torch-wrapper-modules"]], "Expected Dataset Format and Data Processing": [[27, "expected-dataset-format-and-data-processing"]], "Required format": [[27, "required-format"]], "Data processing": [[27, "data-processing"]], "Sequence padding": [[27, "sequence-padding"]], "Sequence masking": [[27, "sequence-masking"]], "An example": [[27, "an-example"]], "Preprocessed Datasets": [[27, "preprocessed-datasets"]], "Evaluate a Model": [[28, "evaluate-a-model"]], "Step 1: Setup the config file": [[28, "step-1-setup-the-config-file"]], "Step 2: Run the evaluation script": [[28, "step-2-run-the-evaluation-script"]], "Checkout the output": [[28, "checkout-the-output"], [29, "checkout-the-output"]], "Training a Model & Configuration Explanation": [[29, "training-a-model-configuration-explanation"]], "Step 1: Setup the config file containing data and model configs": [[29, "step-1-setup-the-config-file-containing-data-and-model-configs"]], "Step 2: Run the training script": [[29, "step-2-run-the-training-script"]]}, "indexentries": {"attnhp (class in easy_tpp.model.torch_model.torch_attnhp)": [[5, "easy_tpp.model.torch_model.torch_attnhp.AttNHP"]], "__init__() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[5, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.__init__"]], "compute_intensities_at_sample_times() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[5, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.compute_intensities_at_sample_times"]], "compute_states_at_sample_times() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[5, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.compute_states_at_sample_times"]], "compute_temporal_embedding() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[5, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.compute_temporal_embedding"]], "easy_tpp.model.torch_model.torch_attnhp": [[5, "module-easy_tpp.model.torch_model.torch_attnhp"]], "forward() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[5, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.forward"]], "forward_pass() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[5, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.forward_pass"]], "loglike_loss() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[5, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.loglike_loss"]], "make_combined_att_mask() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[5, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.make_combined_att_mask"]], "make_layer_mask() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[5, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.make_layer_mask"]], "module": [[5, "module-easy_tpp.model.torch_model.torch_attnhp"], [6, "module-easy_tpp.model.torch_model.torch_baselayer"], [7, "module-easy_tpp.model.torch_model.torch_basemodel"], [8, "module-easy_tpp.model.torch_model.torch_fullynn"], [9, "module-easy_tpp.model.torch_model.torch_intensity_free"], [10, "module-easy_tpp.model.torch_model.torch_nhp"], [11, "module-easy_tpp.model.torch_model.torch_ode_tpp"], [12, "module-easy_tpp.model.torch_model.torch_rmtpp"], [13, "module-easy_tpp.model.torch_model.torch_sahp"], [14, "module-easy_tpp.model.torch_model.torch_thinning"], [15, "module-easy_tpp.model.torch_model.torch_thp"], [22, "module-easy_tpp.model.tf_model"], [22, "module-easy_tpp.model.torch_model"], [25, "module-utils"]], "seq_encoding() (easy_tpp.model.torch_model.torch_attnhp.attnhp method)": [[5, "easy_tpp.model.torch_model.torch_attnhp.AttNHP.seq_encoding"]], "dnn (class in easy_tpp.model.torch_model.torch_baselayer)": [[6, "easy_tpp.model.torch_model.torch_baselayer.DNN"]], "encoderlayer (class in easy_tpp.model.torch_model.torch_baselayer)": [[6, "easy_tpp.model.torch_model.torch_baselayer.EncoderLayer"]], "gelu (class in easy_tpp.model.torch_model.torch_baselayer)": [[6, "easy_tpp.model.torch_model.torch_baselayer.GELU"]], "identity (class in easy_tpp.model.torch_model.torch_baselayer)": [[6, "easy_tpp.model.torch_model.torch_baselayer.Identity"]], "multiheadattention (class in easy_tpp.model.torch_model.torch_baselayer)": [[6, "easy_tpp.model.torch_model.torch_baselayer.MultiHeadAttention"]], "scaledsoftplus (class in easy_tpp.model.torch_model.torch_baselayer)": [[6, "easy_tpp.model.torch_model.torch_baselayer.ScaledSoftplus"]], "sublayerconnection (class in easy_tpp.model.torch_model.torch_baselayer)": [[6, "easy_tpp.model.torch_model.torch_baselayer.SublayerConnection"]], "timepositionalencoding (class in easy_tpp.model.torch_model.torch_baselayer)": [[6, "easy_tpp.model.torch_model.torch_baselayer.TimePositionalEncoding"]], "timeshiftedpositionalencoding (class in easy_tpp.model.torch_model.torch_baselayer)": [[6, "easy_tpp.model.torch_model.torch_baselayer.TimeShiftedPositionalEncoding"]], "__init__() (easy_tpp.model.torch_model.torch_baselayer.dnn method)": [[6, "easy_tpp.model.torch_model.torch_baselayer.DNN.__init__"]], "__init__() (easy_tpp.model.torch_model.torch_baselayer.encoderlayer method)": [[6, "easy_tpp.model.torch_model.torch_baselayer.EncoderLayer.__init__"]], "__init__() (easy_tpp.model.torch_model.torch_baselayer.multiheadattention method)": [[6, "easy_tpp.model.torch_model.torch_baselayer.MultiHeadAttention.__init__"]], "__init__() (easy_tpp.model.torch_model.torch_baselayer.scaledsoftplus method)": [[6, "easy_tpp.model.torch_model.torch_baselayer.ScaledSoftplus.__init__"]], "__init__() (easy_tpp.model.torch_model.torch_baselayer.sublayerconnection method)": [[6, "easy_tpp.model.torch_model.torch_baselayer.SublayerConnection.__init__"]], "__init__() (easy_tpp.model.torch_model.torch_baselayer.timepositionalencoding method)": [[6, "easy_tpp.model.torch_model.torch_baselayer.TimePositionalEncoding.__init__"]], "__init__() (easy_tpp.model.torch_model.torch_baselayer.timeshiftedpositionalencoding method)": [[6, "easy_tpp.model.torch_model.torch_baselayer.TimeShiftedPositionalEncoding.__init__"]], "activation_layer() (in module easy_tpp.model.torch_model.torch_baselayer)": [[6, "easy_tpp.model.torch_model.torch_baselayer.activation_layer"]], "easy_tpp.model.torch_model.torch_baselayer": [[6, "module-easy_tpp.model.torch_model.torch_baselayer"]], "forward() (easy_tpp.model.torch_model.torch_baselayer.dnn method)": [[6, "easy_tpp.model.torch_model.torch_baselayer.DNN.forward"]], "forward() (easy_tpp.model.torch_model.torch_baselayer.encoderlayer method)": [[6, "easy_tpp.model.torch_model.torch_baselayer.EncoderLayer.forward"]], "forward() (easy_tpp.model.torch_model.torch_baselayer.gelu method)": [[6, "easy_tpp.model.torch_model.torch_baselayer.GELU.forward"]], "forward() (easy_tpp.model.torch_model.torch_baselayer.identity method)": [[6, "easy_tpp.model.torch_model.torch_baselayer.Identity.forward"]], "forward() (easy_tpp.model.torch_model.torch_baselayer.multiheadattention method)": [[6, "easy_tpp.model.torch_model.torch_baselayer.MultiHeadAttention.forward"]], "forward() (easy_tpp.model.torch_model.torch_baselayer.scaledsoftplus method)": [[6, "easy_tpp.model.torch_model.torch_baselayer.ScaledSoftplus.forward"]], "forward() (easy_tpp.model.torch_model.torch_baselayer.sublayerconnection method)": [[6, "easy_tpp.model.torch_model.torch_baselayer.SublayerConnection.forward"]], "forward() (easy_tpp.model.torch_model.torch_baselayer.timepositionalencoding method)": [[6, "easy_tpp.model.torch_model.torch_baselayer.TimePositionalEncoding.forward"]], "forward() (easy_tpp.model.torch_model.torch_baselayer.timeshiftedpositionalencoding method)": [[6, "easy_tpp.model.torch_model.torch_baselayer.TimeShiftedPositionalEncoding.forward"]], "torchbasemodel (class in easy_tpp.model.torch_model.torch_basemodel)": [[7, "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel"]], "__init__() (easy_tpp.model.torch_model.torch_basemodel.torchbasemodel method)": [[7, "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel.__init__"]], "compute_loglikelihood() (easy_tpp.model.torch_model.torch_basemodel.torchbasemodel method)": [[7, "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel.compute_loglikelihood"]], "easy_tpp.model.torch_model.torch_basemodel": [[7, "module-easy_tpp.model.torch_model.torch_basemodel"]], "generate_model_from_config() (easy_tpp.model.torch_model.torch_basemodel.torchbasemodel static method)": [[7, "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel.generate_model_from_config"]], "get_logits_at_last_step() (easy_tpp.model.torch_model.torch_basemodel.torchbasemodel static method)": [[7, "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel.get_logits_at_last_step"]], "make_dtime_loss_samples() (easy_tpp.model.torch_model.torch_basemodel.torchbasemodel method)": [[7, "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel.make_dtime_loss_samples"]], "predict_multi_step_since_last_event() (easy_tpp.model.torch_model.torch_basemodel.torchbasemodel method)": [[7, "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel.predict_multi_step_since_last_event"]], "predict_one_step_at_every_event() (easy_tpp.model.torch_model.torch_basemodel.torchbasemodel method)": [[7, "easy_tpp.model.torch_model.torch_basemodel.TorchBaseModel.predict_one_step_at_every_event"]], "cumulhazardfunctionnetwork (class in easy_tpp.model.torch_model.torch_fullynn)": [[8, "easy_tpp.model.torch_model.torch_fullynn.CumulHazardFunctionNetwork"]], "fullynn (class in easy_tpp.model.torch_model.torch_fullynn)": [[8, "easy_tpp.model.torch_model.torch_fullynn.FullyNN"]], "__init__() (easy_tpp.model.torch_model.torch_fullynn.cumulhazardfunctionnetwork method)": [[8, "easy_tpp.model.torch_model.torch_fullynn.CumulHazardFunctionNetwork.__init__"]], "__init__() (easy_tpp.model.torch_model.torch_fullynn.fullynn method)": [[8, "easy_tpp.model.torch_model.torch_fullynn.FullyNN.__init__"]], "compute_intensities_at_sample_times() (easy_tpp.model.torch_model.torch_fullynn.fullynn method)": [[8, "easy_tpp.model.torch_model.torch_fullynn.FullyNN.compute_intensities_at_sample_times"]], "easy_tpp.model.torch_model.torch_fullynn": [[8, "module-easy_tpp.model.torch_model.torch_fullynn"]], "forward() (easy_tpp.model.torch_model.torch_fullynn.cumulhazardfunctionnetwork method)": [[8, "easy_tpp.model.torch_model.torch_fullynn.CumulHazardFunctionNetwork.forward"]], "forward() (easy_tpp.model.torch_model.torch_fullynn.fullynn method)": [[8, "easy_tpp.model.torch_model.torch_fullynn.FullyNN.forward"]], "loglike_loss() (easy_tpp.model.torch_model.torch_fullynn.fullynn method)": [[8, "easy_tpp.model.torch_model.torch_fullynn.FullyNN.loglike_loss"]], "intensityfree (class in easy_tpp.model.torch_model.torch_intensity_free)": [[9, "easy_tpp.model.torch_model.torch_intensity_free.IntensityFree"]], "lognormalmixturedistribution (class in easy_tpp.model.torch_model.torch_intensity_free)": [[9, "easy_tpp.model.torch_model.torch_intensity_free.LogNormalMixtureDistribution"]], "mixturesamefamily (class in easy_tpp.model.torch_model.torch_intensity_free)": [[9, "easy_tpp.model.torch_model.torch_intensity_free.MixtureSameFamily"]], "normal (class in easy_tpp.model.torch_model.torch_intensity_free)": [[9, "easy_tpp.model.torch_model.torch_intensity_free.Normal"]], "__init__() (easy_tpp.model.torch_model.torch_intensity_free.intensityfree method)": [[9, "easy_tpp.model.torch_model.torch_intensity_free.IntensityFree.__init__"]], "__init__() (easy_tpp.model.torch_model.torch_intensity_free.lognormalmixturedistribution method)": [[9, "easy_tpp.model.torch_model.torch_intensity_free.LogNormalMixtureDistribution.__init__"]], "clamp_preserve_gradients() (in module easy_tpp.model.torch_model.torch_intensity_free)": [[9, "easy_tpp.model.torch_model.torch_intensity_free.clamp_preserve_gradients"]], "easy_tpp.model.torch_model.torch_intensity_free": [[9, "module-easy_tpp.model.torch_model.torch_intensity_free"]], "forward() (easy_tpp.model.torch_model.torch_intensity_free.intensityfree method)": [[9, "easy_tpp.model.torch_model.torch_intensity_free.IntensityFree.forward"]], "loglike_loss() (easy_tpp.model.torch_model.torch_intensity_free.intensityfree method)": [[9, "easy_tpp.model.torch_model.torch_intensity_free.IntensityFree.loglike_loss"]], "predict_one_step_at_every_event() (easy_tpp.model.torch_model.torch_intensity_free.intensityfree method)": [[9, "easy_tpp.model.torch_model.torch_intensity_free.IntensityFree.predict_one_step_at_every_event"]], "conttimelstmcell (class in easy_tpp.model.torch_model.torch_nhp)": [[10, "easy_tpp.model.torch_model.torch_nhp.ContTimeLSTMCell"]], "nhp (class in easy_tpp.model.torch_model.torch_nhp)": [[10, "easy_tpp.model.torch_model.torch_nhp.NHP"]], "__init__() (easy_tpp.model.torch_model.torch_nhp.conttimelstmcell method)": [[10, "easy_tpp.model.torch_model.torch_nhp.ContTimeLSTMCell.__init__"]], "__init__() (easy_tpp.model.torch_model.torch_nhp.nhp method)": [[10, "easy_tpp.model.torch_model.torch_nhp.NHP.__init__"]], "compute_intensities_at_sample_times() (easy_tpp.model.torch_model.torch_nhp.nhp method)": [[10, "easy_tpp.model.torch_model.torch_nhp.NHP.compute_intensities_at_sample_times"]], "decay() (easy_tpp.model.torch_model.torch_nhp.conttimelstmcell method)": [[10, "easy_tpp.model.torch_model.torch_nhp.ContTimeLSTMCell.decay"]], "easy_tpp.model.torch_model.torch_nhp": [[10, "module-easy_tpp.model.torch_model.torch_nhp"]], "forward() (easy_tpp.model.torch_model.torch_nhp.conttimelstmcell method)": [[10, "easy_tpp.model.torch_model.torch_nhp.ContTimeLSTMCell.forward"]], "forward() (easy_tpp.model.torch_model.torch_nhp.nhp method)": [[10, "easy_tpp.model.torch_model.torch_nhp.NHP.forward"]], "get_states() (easy_tpp.model.torch_model.torch_nhp.nhp method)": [[10, "easy_tpp.model.torch_model.torch_nhp.NHP.get_states"]], "init_dense_layer() (easy_tpp.model.torch_model.torch_nhp.conttimelstmcell method)": [[10, "easy_tpp.model.torch_model.torch_nhp.ContTimeLSTMCell.init_dense_layer"]], "loglike_loss() (easy_tpp.model.torch_model.torch_nhp.nhp method)": [[10, "easy_tpp.model.torch_model.torch_nhp.NHP.loglike_loss"]], "neuralode (class in easy_tpp.model.torch_model.torch_ode_tpp)": [[11, "easy_tpp.model.torch_model.torch_ode_tpp.NeuralODE"]], "neuralodeadjoint (class in easy_tpp.model.torch_model.torch_ode_tpp)": [[11, "easy_tpp.model.torch_model.torch_ode_tpp.NeuralODEAdjoint"]], "odetpp (class in easy_tpp.model.torch_model.torch_ode_tpp)": [[11, "easy_tpp.model.torch_model.torch_ode_tpp.ODETPP"]], "__init__() (easy_tpp.model.torch_model.torch_ode_tpp.neuralode method)": [[11, "easy_tpp.model.torch_model.torch_ode_tpp.NeuralODE.__init__"]], "__init__() (easy_tpp.model.torch_model.torch_ode_tpp.neuralodeadjoint method)": [[11, "easy_tpp.model.torch_model.torch_ode_tpp.NeuralODEAdjoint.__init__"]], "__init__() (easy_tpp.model.torch_model.torch_ode_tpp.odetpp method)": [[11, "easy_tpp.model.torch_model.torch_ode_tpp.ODETPP.__init__"]], "backward() (easy_tpp.model.torch_model.torch_ode_tpp.neuralodeadjoint static method)": [[11, "easy_tpp.model.torch_model.torch_ode_tpp.NeuralODEAdjoint.backward"]], "compute_intensities_at_sample_times() (easy_tpp.model.torch_model.torch_ode_tpp.odetpp method)": [[11, "easy_tpp.model.torch_model.torch_ode_tpp.ODETPP.compute_intensities_at_sample_times"]], "compute_states_at_sample_times() (easy_tpp.model.torch_model.torch_ode_tpp.odetpp method)": [[11, "easy_tpp.model.torch_model.torch_ode_tpp.ODETPP.compute_states_at_sample_times"]], "easy_tpp.model.torch_model.torch_ode_tpp": [[11, "module-easy_tpp.model.torch_model.torch_ode_tpp"]], "forward() (easy_tpp.model.torch_model.torch_ode_tpp.neuralode method)": [[11, "easy_tpp.model.torch_model.torch_ode_tpp.NeuralODE.forward"]], "forward() (easy_tpp.model.torch_model.torch_ode_tpp.neuralodeadjoint static method)": [[11, "easy_tpp.model.torch_model.torch_ode_tpp.NeuralODEAdjoint.forward"]], "forward() (easy_tpp.model.torch_model.torch_ode_tpp.odetpp method)": [[11, "easy_tpp.model.torch_model.torch_ode_tpp.ODETPP.forward"]], "loglike_loss() (easy_tpp.model.torch_model.torch_ode_tpp.odetpp method)": [[11, "easy_tpp.model.torch_model.torch_ode_tpp.ODETPP.loglike_loss"]], "rmtpp (class in easy_tpp.model.torch_model.torch_rmtpp)": [[12, "easy_tpp.model.torch_model.torch_rmtpp.RMTPP"]], "__init__() (easy_tpp.model.torch_model.torch_rmtpp.rmtpp method)": [[12, "easy_tpp.model.torch_model.torch_rmtpp.RMTPP.__init__"]], "compute_intensities_at_sample_times() (easy_tpp.model.torch_model.torch_rmtpp.rmtpp method)": [[12, "easy_tpp.model.torch_model.torch_rmtpp.RMTPP.compute_intensities_at_sample_times"]], "easy_tpp.model.torch_model.torch_rmtpp": [[12, "module-easy_tpp.model.torch_model.torch_rmtpp"]], "evolve_and_get_intentsity() (easy_tpp.model.torch_model.torch_rmtpp.rmtpp method)": [[12, "easy_tpp.model.torch_model.torch_rmtpp.RMTPP.evolve_and_get_intentsity"]], "forward() (easy_tpp.model.torch_model.torch_rmtpp.rmtpp method)": [[12, "easy_tpp.model.torch_model.torch_rmtpp.RMTPP.forward"]], "loglike_loss() (easy_tpp.model.torch_model.torch_rmtpp.rmtpp method)": [[12, "easy_tpp.model.torch_model.torch_rmtpp.RMTPP.loglike_loss"]], "sahp (class in easy_tpp.model.torch_model.torch_sahp)": [[13, "easy_tpp.model.torch_model.torch_sahp.SAHP"]], "__init__() (easy_tpp.model.torch_model.torch_sahp.sahp method)": [[13, "easy_tpp.model.torch_model.torch_sahp.SAHP.__init__"]], "compute_intensities_at_sample_times() (easy_tpp.model.torch_model.torch_sahp.sahp method)": [[13, "easy_tpp.model.torch_model.torch_sahp.SAHP.compute_intensities_at_sample_times"]], "compute_states_at_sample_times() (easy_tpp.model.torch_model.torch_sahp.sahp method)": [[13, "easy_tpp.model.torch_model.torch_sahp.SAHP.compute_states_at_sample_times"]], "easy_tpp.model.torch_model.torch_sahp": [[13, "module-easy_tpp.model.torch_model.torch_sahp"]], "forward() (easy_tpp.model.torch_model.torch_sahp.sahp method)": [[13, "easy_tpp.model.torch_model.torch_sahp.SAHP.forward"]], "loglike_loss() (easy_tpp.model.torch_model.torch_sahp.sahp method)": [[13, "easy_tpp.model.torch_model.torch_sahp.SAHP.loglike_loss"]], "state_decay() (easy_tpp.model.torch_model.torch_sahp.sahp method)": [[13, "easy_tpp.model.torch_model.torch_sahp.SAHP.state_decay"]], "eventsampler (class in easy_tpp.model.torch_model.torch_thinning)": [[14, "easy_tpp.model.torch_model.torch_thinning.EventSampler"]], "__init__() (easy_tpp.model.torch_model.torch_thinning.eventsampler method)": [[14, "easy_tpp.model.torch_model.torch_thinning.EventSampler.__init__"]], "compute_intensity_upper_bound() (easy_tpp.model.torch_model.torch_thinning.eventsampler method)": [[14, "easy_tpp.model.torch_model.torch_thinning.EventSampler.compute_intensity_upper_bound"]], "draw_next_time_one_step() (easy_tpp.model.torch_model.torch_thinning.eventsampler method)": [[14, "easy_tpp.model.torch_model.torch_thinning.EventSampler.draw_next_time_one_step"]], "easy_tpp.model.torch_model.torch_thinning": [[14, "module-easy_tpp.model.torch_model.torch_thinning"]], "sample_accept() (easy_tpp.model.torch_model.torch_thinning.eventsampler method)": [[14, "easy_tpp.model.torch_model.torch_thinning.EventSampler.sample_accept"]], "sample_exp_distribution() (easy_tpp.model.torch_model.torch_thinning.eventsampler method)": [[14, "easy_tpp.model.torch_model.torch_thinning.EventSampler.sample_exp_distribution"]], "sample_uniform_distribution() (easy_tpp.model.torch_model.torch_thinning.eventsampler method)": [[14, "easy_tpp.model.torch_model.torch_thinning.EventSampler.sample_uniform_distribution"]], "thp (class in easy_tpp.model.torch_model.torch_thp)": [[15, "easy_tpp.model.torch_model.torch_thp.THP"]], "__init__() (easy_tpp.model.torch_model.torch_thp.thp method)": [[15, "easy_tpp.model.torch_model.torch_thp.THP.__init__"]], "compute_intensities_at_sample_times() (easy_tpp.model.torch_model.torch_thp.thp method)": [[15, "easy_tpp.model.torch_model.torch_thp.THP.compute_intensities_at_sample_times"]], "compute_states_at_sample_times() (easy_tpp.model.torch_model.torch_thp.thp method)": [[15, "easy_tpp.model.torch_model.torch_thp.THP.compute_states_at_sample_times"]], "easy_tpp.model.torch_model.torch_thp": [[15, "module-easy_tpp.model.torch_model.torch_thp"]], "forward() (easy_tpp.model.torch_model.torch_thp.thp method)": [[15, "easy_tpp.model.torch_model.torch_thp.THP.forward"]], "loglike_loss() (easy_tpp.model.torch_model.torch_thp.thp method)": [[15, "easy_tpp.model.torch_model.torch_thp.THP.loglike_loss"]], "easy_tpp.model.tf_model": [[22, "module-easy_tpp.model.tf_model"]], "easy_tpp.model.torch_model": [[22, "module-easy_tpp.model.torch_model"]], "default_dataset_id (utils.defaultrunnerconfig attribute)": [[25, "utils.DefaultRunnerConfig.DEFAULT_DATASET_ID"]], "default_format (utils.logconst attribute)": [[25, "utils.LogConst.DEFAULT_FORMAT"]], "default_format_long (utils.logconst attribute)": [[25, "utils.LogConst.DEFAULT_FORMAT_LONG"]], "do_not_pad (utils.paddingstrategy attribute)": [[25, "utils.PaddingStrategy.DO_NOT_PAD"]], "do_not_truncate (utils.truncationstrategy attribute)": [[25, "utils.TruncationStrategy.DO_NOT_TRUNCATE"]], "defaultrunnerconfig (class in utils)": [[25, "utils.DefaultRunnerConfig"]], "explicitenum (class in utils)": [[25, "utils.ExplicitEnum"]], "longest (utils.paddingstrategy attribute)": [[25, "utils.PaddingStrategy.LONGEST"]], "longest_first (utils.truncationstrategy attribute)": [[25, "utils.TruncationStrategy.LONGEST_FIRST"]], "logconst (class in utils)": [[25, "utils.LogConst"]], "maximize (utils.metricshelper attribute)": [[25, "utils.MetricsHelper.MAXIMIZE"]], "max_length (utils.paddingstrategy attribute)": [[25, "utils.PaddingStrategy.MAX_LENGTH"]], "minimize (utils.metricshelper attribute)": [[25, "utils.MetricsHelper.MINIMIZE"]], "metricshelper (class in utils)": [[25, "utils.MetricsHelper"]], "metricstracker (class in utils)": [[25, "utils.MetricsTracker"]], "numpy (utils.tensortype attribute)": [[25, "utils.TensorType.NUMPY"]], "predict (utils.runnerphase attribute)": [[25, "utils.RunnerPhase.PREDICT"]], "pytorch (utils.tensortype attribute)": [[25, "utils.TensorType.PYTORCH"]], "paddingstrategy (class in utils)": [[25, "utils.PaddingStrategy"]], "registrable (class in utils)": [[25, "utils.Registrable"]], "runnerphase (class in utils)": [[25, "utils.RunnerPhase"]], "tensorflow (utils.tensortype attribute)": [[25, "utils.TensorType.TENSORFLOW"]], "train (utils.runnerphase attribute)": [[25, "utils.RunnerPhase.TRAIN"]], "tensortype (class in utils)": [[25, "utils.TensorType"]], "timer (class in utils)": [[25, "utils.Timer"]], "truncationstrategy (class in utils)": [[25, "utils.TruncationStrategy"]], "validate (utils.runnerphase attribute)": [[25, "utils.RunnerPhase.VALIDATE"]], "__init__() (utils.metricstracker method)": [[25, "utils.MetricsTracker.__init__"]], "__init__() (utils.timer method)": [[25, "utils.Timer.__init__"]], "array_pad_cols() (in module utils)": [[25, "utils.array_pad_cols"]], "by_name() (utils.registrable class method)": [[25, "utils.Registrable.by_name"]], "concat_element() (in module utils)": [[25, "utils.concat_element"]], "count_model_params() (in module utils)": [[25, "utils.count_model_params"]], "create_folder() (in module utils)": [[25, "utils.create_folder"]], "dict_deep_update() (in module utils)": [[25, "utils.dict_deep_update"]], "end() (utils.timer method)": [[25, "utils.Timer.end"]], "generate_and_save_json() (in module utils)": [[25, "utils.generate_and_save_json"]], "get_all_registered_metric() (utils.metricshelper static method)": [[25, "utils.MetricsHelper.get_all_registered_metric"]], "get_metric_direction() (utils.metricshelper static method)": [[25, "utils.MetricsHelper.get_metric_direction"]], "get_metric_function() (utils.metricshelper static method)": [[25, "utils.MetricsHelper.get_metric_function"]], "get_metrics_callback_from_names() (utils.metricshelper static method)": [[25, "utils.MetricsHelper.get_metrics_callback_from_names"]], "get_stage() (in module utils)": [[25, "utils.get_stage"]], "get_unique_id() (in module utils)": [[25, "utils.get_unique_id"]], "has_key() (in module utils)": [[25, "utils.has_key"]], "is_local_master_process() (in module utils)": [[25, "utils.is_local_master_process"]], "is_master_process() (in module utils)": [[25, "utils.is_master_process"]], "is_numpy_array() (in module utils)": [[25, "utils.is_numpy_array"]], "is_tensorflow_probability_available() (in module utils)": [[25, "utils.is_tensorflow_probability_available"]], "is_tf_available() (in module utils)": [[25, "utils.is_tf_available"]], "is_tf_gpu_available() (in module utils)": [[25, "utils.is_tf_gpu_available"]], "is_torch_available() (in module utils)": [[25, "utils.is_torch_available"]], "is_torch_cuda_available() (in module utils)": [[25, "utils.is_torch_cuda_available"]], "is_torch_device() (in module utils)": [[25, "utils.is_torch_device"]], "is_torch_gpu_available() (in module utils)": [[25, "utils.is_torch_gpu_available"]], "is_torchvision_available() (in module utils)": [[25, "utils.is_torchvision_available"]], "list_available() (utils.registrable class method)": [[25, "utils.Registrable.list_available"]], "load_json() (in module utils)": [[25, "utils.load_json"]], "load_pickle() (in module utils)": [[25, "utils.load_pickle"]], "load_yaml_config() (in module utils)": [[25, "utils.load_yaml_config"]], "make_config_string() (in module utils)": [[25, "utils.make_config_string"]], "metrics_dict_to_str() (utils.metricshelper static method)": [[25, "utils.MetricsHelper.metrics_dict_to_str"]], "parse_uri_to_protocol_and_path() (in module utils)": [[25, "utils.parse_uri_to_protocol_and_path"]], "py_assert() (in module utils)": [[25, "utils.py_assert"]], "register() (utils.metricshelper static method)": [[25, "utils.MetricsHelper.register"]], "register() (utils.registrable class method)": [[25, "utils.Registrable.register"]], "registry_dict() (utils.registrable class method)": [[25, "utils.Registrable.registry_dict"]], "requires_backends() (in module utils)": [[25, "utils.requires_backends"]], "resolve_class_name() (utils.registrable class method)": [[25, "utils.Registrable.resolve_class_name"]], "rk4_step_method() (in module utils)": [[25, "utils.rk4_step_method"]], "save_json() (in module utils)": [[25, "utils.save_json"]], "save_pickle() (in module utils)": [[25, "utils.save_pickle"]], "save_yaml_config() (in module utils)": [[25, "utils.save_yaml_config"]], "set_device() (in module utils)": [[25, "utils.set_device"]], "set_optimizer() (in module utils)": [[25, "utils.set_optimizer"]], "set_seed() (in module utils)": [[25, "utils.set_seed"]], "start() (utils.timer method)": [[25, "utils.Timer.start"]], "to_dict() (in module utils)": [[25, "utils.to_dict"]], "update_best() (utils.metricstracker method)": [[25, "utils.MetricsTracker.update_best"]], "utils": [[25, "module-utils"]]}})